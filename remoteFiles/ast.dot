digraph G {
"ROOT" -> "Type: source, Id: 138, Value: source(source(source(source(NULL, sourceItem(funcSignature(argDef(int, test_func2), argDef(int, arg1)), block(listStatement(dowhile(block(listStatement(assigment(res, PLUS(10, braces(STAR(5, 10), NULL))), NULL), NULL), GREATERTHAN(j, 3)), NULL), NULL))), sourceItem(funcSignature(argDef(int, test_func3), argDef(int, arg1)), block(listStatement(if(EQUALITY(a, 5), ifStatements(block(listStatement(assigment(a, 4), NULL), NULL), NULL)), NULL), NULL))), sourceItem(funcSignature(argDef(int, test_func4), argDef(int, arg1)), block(listStatement(if(EQUALITY(a, 5), ifStatements(block(listStatement(assigment(a, 4), NULL), NULL), else(block(listStatement(assigment(a, 5), NULL), NULL), NULL))), NULL), NULL))), sourceItem(funcSignature(argDef(int, test_func), NULL), block(listStatement(if(EQUALITY(a, 2), ifStatements(block(listStatement(assigment(b, 5), listStatement(dowhile(block(listStatement(assigment(r, PLUS(5, braces(STAR(6, 4), NULL))), listStatement(dowhile(block(listStatement(while(GREATERTHAN(k, 10), block(listStatement(assigment(a, STAR(b, 2)), listStatement(CALL(test_func4, optionalListExpr(NULL, NULL)), NULL)), NULL)), NULL), NULL), LESSTHAN(i, 2)), NULL)), NULL), GREATERTHAN(j, 3)), NULL)), NULL), NULL)), NULL), NULL)))""Type: source, Id: 138, Value: source(source(source(source(NULL, sourceItem(funcSignature(argDef(int, test_func2), argDef(int, arg1)), block(listStatement(dowhile(block(listStatement(assigment(res, PLUS(10, braces(STAR(5, 10), NULL))), NULL), NULL), GREATERTHAN(j, 3)), NULL), NULL))), sourceItem(funcSignature(argDef(int, test_func3), argDef(int, arg1)), block(listStatement(if(EQUALITY(a, 5), ifStatements(block(listStatement(assigment(a, 4), NULL), NULL), NULL)), NULL), NULL))), sourceItem(funcSignature(argDef(int, test_func4), argDef(int, arg1)), block(listStatement(if(EQUALITY(a, 5), ifStatements(block(listStatement(assigment(a, 4), NULL), NULL), else(block(listStatement(assigment(a, 5), NULL), NULL), NULL))), NULL), NULL))), sourceItem(funcSignature(argDef(int, test_func), NULL), block(listStatement(if(EQUALITY(a, 2), ifStatements(block(listStatement(assigment(b, 5), listStatement(dowhile(block(listStatement(assigment(r, PLUS(5, braces(STAR(6, 4), NULL))), listStatement(dowhile(block(listStatement(while(GREATERTHAN(k, 10), block(listStatement(assigment(a, STAR(b, 2)), listStatement(CALL(test_func4, optionalListExpr(NULL, NULL)), NULL)), NULL)), NULL), NULL), LESSTHAN(i, 2)), NULL)), NULL), GREATERTHAN(j, 3)), NULL)), NULL), NULL)), NULL), NULL)))" -> "Type: source, Id: 77, Value: source(source(source(NULL, sourceItem(funcSignature(argDef(int, test_func2), argDef(int, arg1)), block(listStatement(dowhile(block(listStatement(assigment(res, PLUS(10, braces(STAR(5, 10), NULL))), NULL), NULL), GREATERTHAN(j, 3)), NULL), NULL))), sourceItem(funcSignature(argDef(int, test_func3), argDef(int, arg1)), block(listStatement(if(EQUALITY(a, 5), ifStatements(block(listStatement(assigment(a, 4), NULL), NULL), NULL)), NULL), NULL))), sourceItem(funcSignature(argDef(int, test_func4), argDef(int, arg1)), block(listStatement(if(EQUALITY(a, 5), ifStatements(block(listStatement(assigment(a, 4), NULL), NULL), else(block(listStatement(assigment(a, 5), NULL), NULL), NULL))), NULL), NULL)))";
"Type: source, Id: 77, Value: source(source(source(NULL, sourceItem(funcSignature(argDef(int, test_func2), argDef(int, arg1)), block(listStatement(dowhile(block(listStatement(assigment(res, PLUS(10, braces(STAR(5, 10), NULL))), NULL), NULL), GREATERTHAN(j, 3)), NULL), NULL))), sourceItem(funcSignature(argDef(int, test_func3), argDef(int, arg1)), block(listStatement(if(EQUALITY(a, 5), ifStatements(block(listStatement(assigment(a, 4), NULL), NULL), NULL)), NULL), NULL))), sourceItem(funcSignature(argDef(int, test_func4), argDef(int, arg1)), block(listStatement(if(EQUALITY(a, 5), ifStatements(block(listStatement(assigment(a, 4), NULL), NULL), else(block(listStatement(assigment(a, 5), NULL), NULL), NULL))), NULL), NULL)))" -> "Type: source, Id: 48, Value: source(source(NULL, sourceItem(funcSignature(argDef(int, test_func2), argDef(int, arg1)), block(listStatement(dowhile(block(listStatement(assigment(res, PLUS(10, braces(STAR(5, 10), NULL))), NULL), NULL), GREATERTHAN(j, 3)), NULL), NULL))), sourceItem(funcSignature(argDef(int, test_func3), argDef(int, arg1)), block(listStatement(if(EQUALITY(a, 5), ifStatements(block(listStatement(assigment(a, 4), NULL), NULL), NULL)), NULL), NULL)))";
"Type: source, Id: 48, Value: source(source(NULL, sourceItem(funcSignature(argDef(int, test_func2), argDef(int, arg1)), block(listStatement(dowhile(block(listStatement(assigment(res, PLUS(10, braces(STAR(5, 10), NULL))), NULL), NULL), GREATERTHAN(j, 3)), NULL), NULL))), sourceItem(funcSignature(argDef(int, test_func3), argDef(int, arg1)), block(listStatement(if(EQUALITY(a, 5), ifStatements(block(listStatement(assigment(a, 4), NULL), NULL), NULL)), NULL), NULL)))" -> "Type: source, Id: 26, Value: source(NULL, sourceItem(funcSignature(argDef(int, test_func2), argDef(int, arg1)), block(listStatement(dowhile(block(listStatement(assigment(res, PLUS(10, braces(STAR(5, 10), NULL))), NULL), NULL), GREATERTHAN(j, 3)), NULL), NULL)))";
"Type: source, Id: 26, Value: source(NULL, sourceItem(funcSignature(argDef(int, test_func2), argDef(int, arg1)), block(listStatement(dowhile(block(listStatement(assigment(res, PLUS(10, braces(STAR(5, 10), NULL))), NULL), NULL), GREATERTHAN(j, 3)), NULL), NULL)))" -> "Type: sourceItem, Id: 25, Value: sourceItem(funcSignature(argDef(int, test_func2), argDef(int, arg1)), block(listStatement(dowhile(block(listStatement(assigment(res, PLUS(10, braces(STAR(5, 10), NULL))), NULL), NULL), GREATERTHAN(j, 3)), NULL), NULL))";
"Type: sourceItem, Id: 25, Value: sourceItem(funcSignature(argDef(int, test_func2), argDef(int, arg1)), block(listStatement(dowhile(block(listStatement(assigment(res, PLUS(10, braces(STAR(5, 10), NULL))), NULL), NULL), GREATERTHAN(j, 3)), NULL), NULL))" -> "Type: funcSignature, Id: 6, Value: funcSignature(argDef(int, test_func2), argDef(int, arg1))";
"Type: funcSignature, Id: 6, Value: funcSignature(argDef(int, test_func2), argDef(int, arg1))" -> "Type: argDef, Id: 2, Value: argDef(int, test_func2)";
"Type: argDef, Id: 2, Value: argDef(int, test_func2)" -> "Type: TYPEDEF, Id: 0, Value: int";
"Type: argDef, Id: 2, Value: argDef(int, test_func2)" -> "Type: IDENTIFIER, Id: 1, Value: test_func2";
"Type: funcSignature, Id: 6, Value: funcSignature(argDef(int, test_func2), argDef(int, arg1))" -> "Type: argDef, Id: 5, Value: argDef(int, arg1)";
"Type: argDef, Id: 5, Value: argDef(int, arg1)" -> "Type: TYPEDEF, Id: 3, Value: int";
"Type: argDef, Id: 5, Value: argDef(int, arg1)" -> "Type: IDENTIFIER, Id: 4, Value: arg1";
"Type: sourceItem, Id: 25, Value: sourceItem(funcSignature(argDef(int, test_func2), argDef(int, arg1)), block(listStatement(dowhile(block(listStatement(assigment(res, PLUS(10, braces(STAR(5, 10), NULL))), NULL), NULL), GREATERTHAN(j, 3)), NULL), NULL))" -> "Type: block, Id: 24, Value: block(listStatement(dowhile(block(listStatement(assigment(res, PLUS(10, braces(STAR(5, 10), NULL))), NULL), NULL), GREATERTHAN(j, 3)), NULL), NULL)";
"Type: block, Id: 24, Value: block(listStatement(dowhile(block(listStatement(assigment(res, PLUS(10, braces(STAR(5, 10), NULL))), NULL), NULL), GREATERTHAN(j, 3)), NULL), NULL)" -> "Type: listStatement, Id: 23, Value: listStatement(dowhile(block(listStatement(assigment(res, PLUS(10, braces(STAR(5, 10), NULL))), NULL), NULL), GREATERTHAN(j, 3)), NULL)";
"Type: listStatement, Id: 23, Value: listStatement(dowhile(block(listStatement(assigment(res, PLUS(10, braces(STAR(5, 10), NULL))), NULL), NULL), GREATERTHAN(j, 3)), NULL)" -> "Type: dowhile, Id: 22, Value: dowhile(block(listStatement(assigment(res, PLUS(10, braces(STAR(5, 10), NULL))), NULL), NULL), GREATERTHAN(j, 3))";
"Type: dowhile, Id: 22, Value: dowhile(block(listStatement(assigment(res, PLUS(10, braces(STAR(5, 10), NULL))), NULL), NULL), GREATERTHAN(j, 3))" -> "Type: block, Id: 17, Value: block(listStatement(assigment(res, PLUS(10, braces(STAR(5, 10), NULL))), NULL), NULL)";
"Type: block, Id: 17, Value: block(listStatement(assigment(res, PLUS(10, braces(STAR(5, 10), NULL))), NULL), NULL)" -> "Type: listStatement, Id: 16, Value: listStatement(assigment(res, PLUS(10, braces(STAR(5, 10), NULL))), NULL)";
"Type: listStatement, Id: 16, Value: listStatement(assigment(res, PLUS(10, braces(STAR(5, 10), NULL))), NULL)" -> "Type: assigment, Id: 15, Value: assigment(res, PLUS(10, braces(STAR(5, 10), NULL)))";
"Type: assigment, Id: 15, Value: assigment(res, PLUS(10, braces(STAR(5, 10), NULL)))" -> "Type: IDENTIFIER, Id: 8, Value: res";
"Type: assigment, Id: 15, Value: assigment(res, PLUS(10, braces(STAR(5, 10), NULL)))" -> "Type: PLUS, Id: 14, Value: PLUS(10, braces(STAR(5, 10), NULL))";
"Type: PLUS, Id: 14, Value: PLUS(10, braces(STAR(5, 10), NULL))" -> "Type: DEC, Id: 9, Value: 10";
"Type: PLUS, Id: 14, Value: PLUS(10, braces(STAR(5, 10), NULL))" -> "Type: braces, Id: 13, Value: braces(STAR(5, 10), NULL)";
"Type: braces, Id: 13, Value: braces(STAR(5, 10), NULL)" -> "Type: STAR, Id: 12, Value: STAR(5, 10)";
"Type: STAR, Id: 12, Value: STAR(5, 10)" -> "Type: DEC, Id: 10, Value: 5";
"Type: STAR, Id: 12, Value: STAR(5, 10)" -> "Type: DEC, Id: 11, Value: 10";
"Type: dowhile, Id: 22, Value: dowhile(block(listStatement(assigment(res, PLUS(10, braces(STAR(5, 10), NULL))), NULL), NULL), GREATERTHAN(j, 3))" -> "Type: GREATERTHAN, Id: 21, Value: GREATERTHAN(j, 3)";
"Type: GREATERTHAN, Id: 21, Value: GREATERTHAN(j, 3)" -> "Type: IDENTIFIER, Id: 19, Value: j";
"Type: GREATERTHAN, Id: 21, Value: GREATERTHAN(j, 3)" -> "Type: DEC, Id: 20, Value: 3";
"Type: source, Id: 48, Value: source(source(NULL, sourceItem(funcSignature(argDef(int, test_func2), argDef(int, arg1)), block(listStatement(dowhile(block(listStatement(assigment(res, PLUS(10, braces(STAR(5, 10), NULL))), NULL), NULL), GREATERTHAN(j, 3)), NULL), NULL))), sourceItem(funcSignature(argDef(int, test_func3), argDef(int, arg1)), block(listStatement(if(EQUALITY(a, 5), ifStatements(block(listStatement(assigment(a, 4), NULL), NULL), NULL)), NULL), NULL)))" -> "Type: sourceItem, Id: 47, Value: sourceItem(funcSignature(argDef(int, test_func3), argDef(int, arg1)), block(listStatement(if(EQUALITY(a, 5), ifStatements(block(listStatement(assigment(a, 4), NULL), NULL), NULL)), NULL), NULL))";
"Type: sourceItem, Id: 47, Value: sourceItem(funcSignature(argDef(int, test_func3), argDef(int, arg1)), block(listStatement(if(EQUALITY(a, 5), ifStatements(block(listStatement(assigment(a, 4), NULL), NULL), NULL)), NULL), NULL))" -> "Type: funcSignature, Id: 33, Value: funcSignature(argDef(int, test_func3), argDef(int, arg1))";
"Type: funcSignature, Id: 33, Value: funcSignature(argDef(int, test_func3), argDef(int, arg1))" -> "Type: argDef, Id: 29, Value: argDef(int, test_func3)";
"Type: argDef, Id: 29, Value: argDef(int, test_func3)" -> "Type: TYPEDEF, Id: 27, Value: int";
"Type: argDef, Id: 29, Value: argDef(int, test_func3)" -> "Type: IDENTIFIER, Id: 28, Value: test_func3";
"Type: funcSignature, Id: 33, Value: funcSignature(argDef(int, test_func3), argDef(int, arg1))" -> "Type: argDef, Id: 32, Value: argDef(int, arg1)";
"Type: argDef, Id: 32, Value: argDef(int, arg1)" -> "Type: TYPEDEF, Id: 30, Value: int";
"Type: argDef, Id: 32, Value: argDef(int, arg1)" -> "Type: IDENTIFIER, Id: 31, Value: arg1";
"Type: sourceItem, Id: 47, Value: sourceItem(funcSignature(argDef(int, test_func3), argDef(int, arg1)), block(listStatement(if(EQUALITY(a, 5), ifStatements(block(listStatement(assigment(a, 4), NULL), NULL), NULL)), NULL), NULL))" -> "Type: block, Id: 46, Value: block(listStatement(if(EQUALITY(a, 5), ifStatements(block(listStatement(assigment(a, 4), NULL), NULL), NULL)), NULL), NULL)";
"Type: block, Id: 46, Value: block(listStatement(if(EQUALITY(a, 5), ifStatements(block(listStatement(assigment(a, 4), NULL), NULL), NULL)), NULL), NULL)" -> "Type: listStatement, Id: 45, Value: listStatement(if(EQUALITY(a, 5), ifStatements(block(listStatement(assigment(a, 4), NULL), NULL), NULL)), NULL)";
"Type: listStatement, Id: 45, Value: listStatement(if(EQUALITY(a, 5), ifStatements(block(listStatement(assigment(a, 4), NULL), NULL), NULL)), NULL)" -> "Type: if, Id: 44, Value: if(EQUALITY(a, 5), ifStatements(block(listStatement(assigment(a, 4), NULL), NULL), NULL))";
"Type: if, Id: 44, Value: if(EQUALITY(a, 5), ifStatements(block(listStatement(assigment(a, 4), NULL), NULL), NULL))" -> "Type: EQUALITY, Id: 37, Value: EQUALITY(a, 5)";
"Type: EQUALITY, Id: 37, Value: EQUALITY(a, 5)" -> "Type: IDENTIFIER, Id: 35, Value: a";
"Type: EQUALITY, Id: 37, Value: EQUALITY(a, 5)" -> "Type: DEC, Id: 36, Value: 5";
"Type: if, Id: 44, Value: if(EQUALITY(a, 5), ifStatements(block(listStatement(assigment(a, 4), NULL), NULL), NULL))" -> "Type: ifStatements, Id: 43, Value: ifStatements(block(listStatement(assigment(a, 4), NULL), NULL), NULL)";
"Type: ifStatements, Id: 43, Value: ifStatements(block(listStatement(assigment(a, 4), NULL), NULL), NULL)" -> "Type: block, Id: 42, Value: block(listStatement(assigment(a, 4), NULL), NULL)";
"Type: block, Id: 42, Value: block(listStatement(assigment(a, 4), NULL), NULL)" -> "Type: listStatement, Id: 41, Value: listStatement(assigment(a, 4), NULL)";
"Type: listStatement, Id: 41, Value: listStatement(assigment(a, 4), NULL)" -> "Type: assigment, Id: 40, Value: assigment(a, 4)";
"Type: assigment, Id: 40, Value: assigment(a, 4)" -> "Type: IDENTIFIER, Id: 38, Value: a";
"Type: assigment, Id: 40, Value: assigment(a, 4)" -> "Type: DEC, Id: 39, Value: 4";
"Type: source, Id: 77, Value: source(source(source(NULL, sourceItem(funcSignature(argDef(int, test_func2), argDef(int, arg1)), block(listStatement(dowhile(block(listStatement(assigment(res, PLUS(10, braces(STAR(5, 10), NULL))), NULL), NULL), GREATERTHAN(j, 3)), NULL), NULL))), sourceItem(funcSignature(argDef(int, test_func3), argDef(int, arg1)), block(listStatement(if(EQUALITY(a, 5), ifStatements(block(listStatement(assigment(a, 4), NULL), NULL), NULL)), NULL), NULL))), sourceItem(funcSignature(argDef(int, test_func4), argDef(int, arg1)), block(listStatement(if(EQUALITY(a, 5), ifStatements(block(listStatement(assigment(a, 4), NULL), NULL), else(block(listStatement(assigment(a, 5), NULL), NULL), NULL))), NULL), NULL)))" -> "Type: sourceItem, Id: 76, Value: sourceItem(funcSignature(argDef(int, test_func4), argDef(int, arg1)), block(listStatement(if(EQUALITY(a, 5), ifStatements(block(listStatement(assigment(a, 4), NULL), NULL), else(block(listStatement(assigment(a, 5), NULL), NULL), NULL))), NULL), NULL))";
"Type: sourceItem, Id: 76, Value: sourceItem(funcSignature(argDef(int, test_func4), argDef(int, arg1)), block(listStatement(if(EQUALITY(a, 5), ifStatements(block(listStatement(assigment(a, 4), NULL), NULL), else(block(listStatement(assigment(a, 5), NULL), NULL), NULL))), NULL), NULL))" -> "Type: funcSignature, Id: 55, Value: funcSignature(argDef(int, test_func4), argDef(int, arg1))";
"Type: funcSignature, Id: 55, Value: funcSignature(argDef(int, test_func4), argDef(int, arg1))" -> "Type: argDef, Id: 51, Value: argDef(int, test_func4)";
"Type: argDef, Id: 51, Value: argDef(int, test_func4)" -> "Type: TYPEDEF, Id: 49, Value: int";
"Type: argDef, Id: 51, Value: argDef(int, test_func4)" -> "Type: IDENTIFIER, Id: 50, Value: test_func4";
"Type: funcSignature, Id: 55, Value: funcSignature(argDef(int, test_func4), argDef(int, arg1))" -> "Type: argDef, Id: 54, Value: argDef(int, arg1)";
"Type: argDef, Id: 54, Value: argDef(int, arg1)" -> "Type: TYPEDEF, Id: 52, Value: int";
"Type: argDef, Id: 54, Value: argDef(int, arg1)" -> "Type: IDENTIFIER, Id: 53, Value: arg1";
"Type: sourceItem, Id: 76, Value: sourceItem(funcSignature(argDef(int, test_func4), argDef(int, arg1)), block(listStatement(if(EQUALITY(a, 5), ifStatements(block(listStatement(assigment(a, 4), NULL), NULL), else(block(listStatement(assigment(a, 5), NULL), NULL), NULL))), NULL), NULL))" -> "Type: block, Id: 75, Value: block(listStatement(if(EQUALITY(a, 5), ifStatements(block(listStatement(assigment(a, 4), NULL), NULL), else(block(listStatement(assigment(a, 5), NULL), NULL), NULL))), NULL), NULL)";
"Type: block, Id: 75, Value: block(listStatement(if(EQUALITY(a, 5), ifStatements(block(listStatement(assigment(a, 4), NULL), NULL), else(block(listStatement(assigment(a, 5), NULL), NULL), NULL))), NULL), NULL)" -> "Type: listStatement, Id: 74, Value: listStatement(if(EQUALITY(a, 5), ifStatements(block(listStatement(assigment(a, 4), NULL), NULL), else(block(listStatement(assigment(a, 5), NULL), NULL), NULL))), NULL)";
"Type: listStatement, Id: 74, Value: listStatement(if(EQUALITY(a, 5), ifStatements(block(listStatement(assigment(a, 4), NULL), NULL), else(block(listStatement(assigment(a, 5), NULL), NULL), NULL))), NULL)" -> "Type: if, Id: 73, Value: if(EQUALITY(a, 5), ifStatements(block(listStatement(assigment(a, 4), NULL), NULL), else(block(listStatement(assigment(a, 5), NULL), NULL), NULL)))";
"Type: if, Id: 73, Value: if(EQUALITY(a, 5), ifStatements(block(listStatement(assigment(a, 4), NULL), NULL), else(block(listStatement(assigment(a, 5), NULL), NULL), NULL)))" -> "Type: EQUALITY, Id: 59, Value: EQUALITY(a, 5)";
"Type: EQUALITY, Id: 59, Value: EQUALITY(a, 5)" -> "Type: IDENTIFIER, Id: 57, Value: a";
"Type: EQUALITY, Id: 59, Value: EQUALITY(a, 5)" -> "Type: DEC, Id: 58, Value: 5";
"Type: if, Id: 73, Value: if(EQUALITY(a, 5), ifStatements(block(listStatement(assigment(a, 4), NULL), NULL), else(block(listStatement(assigment(a, 5), NULL), NULL), NULL)))" -> "Type: ifStatements, Id: 72, Value: ifStatements(block(listStatement(assigment(a, 4), NULL), NULL), else(block(listStatement(assigment(a, 5), NULL), NULL), NULL))";
"Type: ifStatements, Id: 72, Value: ifStatements(block(listStatement(assigment(a, 4), NULL), NULL), else(block(listStatement(assigment(a, 5), NULL), NULL), NULL))" -> "Type: block, Id: 64, Value: block(listStatement(assigment(a, 4), NULL), NULL)";
"Type: block, Id: 64, Value: block(listStatement(assigment(a, 4), NULL), NULL)" -> "Type: listStatement, Id: 63, Value: listStatement(assigment(a, 4), NULL)";
"Type: listStatement, Id: 63, Value: listStatement(assigment(a, 4), NULL)" -> "Type: assigment, Id: 62, Value: assigment(a, 4)";
"Type: assigment, Id: 62, Value: assigment(a, 4)" -> "Type: IDENTIFIER, Id: 60, Value: a";
"Type: assigment, Id: 62, Value: assigment(a, 4)" -> "Type: DEC, Id: 61, Value: 4";
"Type: ifStatements, Id: 72, Value: ifStatements(block(listStatement(assigment(a, 4), NULL), NULL), else(block(listStatement(assigment(a, 5), NULL), NULL), NULL))" -> "Type: else, Id: 71, Value: else(block(listStatement(assigment(a, 5), NULL), NULL), NULL)";
"Type: else, Id: 71, Value: else(block(listStatement(assigment(a, 5), NULL), NULL), NULL)" -> "Type: block, Id: 70, Value: block(listStatement(assigment(a, 5), NULL), NULL)";
"Type: block, Id: 70, Value: block(listStatement(assigment(a, 5), NULL), NULL)" -> "Type: listStatement, Id: 69, Value: listStatement(assigment(a, 5), NULL)";
"Type: listStatement, Id: 69, Value: listStatement(assigment(a, 5), NULL)" -> "Type: assigment, Id: 68, Value: assigment(a, 5)";
"Type: assigment, Id: 68, Value: assigment(a, 5)" -> "Type: IDENTIFIER, Id: 66, Value: a";
"Type: assigment, Id: 68, Value: assigment(a, 5)" -> "Type: DEC, Id: 67, Value: 5";
"Type: source, Id: 138, Value: source(source(source(source(NULL, sourceItem(funcSignature(argDef(int, test_func2), argDef(int, arg1)), block(listStatement(dowhile(block(listStatement(assigment(res, PLUS(10, braces(STAR(5, 10), NULL))), NULL), NULL), GREATERTHAN(j, 3)), NULL), NULL))), sourceItem(funcSignature(argDef(int, test_func3), argDef(int, arg1)), block(listStatement(if(EQUALITY(a, 5), ifStatements(block(listStatement(assigment(a, 4), NULL), NULL), NULL)), NULL), NULL))), sourceItem(funcSignature(argDef(int, test_func4), argDef(int, arg1)), block(listStatement(if(EQUALITY(a, 5), ifStatements(block(listStatement(assigment(a, 4), NULL), NULL), else(block(listStatement(assigment(a, 5), NULL), NULL), NULL))), NULL), NULL))), sourceItem(funcSignature(argDef(int, test_func), NULL), block(listStatement(if(EQUALITY(a, 2), ifStatements(block(listStatement(assigment(b, 5), listStatement(dowhile(block(listStatement(assigment(r, PLUS(5, braces(STAR(6, 4), NULL))), listStatement(dowhile(block(listStatement(while(GREATERTHAN(k, 10), block(listStatement(assigment(a, STAR(b, 2)), listStatement(CALL(test_func4, optionalListExpr(NULL, NULL)), NULL)), NULL)), NULL), NULL), LESSTHAN(i, 2)), NULL)), NULL), GREATERTHAN(j, 3)), NULL)), NULL), NULL)), NULL), NULL)))" -> "Type: sourceItem, Id: 137, Value: sourceItem(funcSignature(argDef(int, test_func), NULL), block(listStatement(if(EQUALITY(a, 2), ifStatements(block(listStatement(assigment(b, 5), listStatement(dowhile(block(listStatement(assigment(r, PLUS(5, braces(STAR(6, 4), NULL))), listStatement(dowhile(block(listStatement(while(GREATERTHAN(k, 10), block(listStatement(assigment(a, STAR(b, 2)), listStatement(CALL(test_func4, optionalListExpr(NULL, NULL)), NULL)), NULL)), NULL), NULL), LESSTHAN(i, 2)), NULL)), NULL), GREATERTHAN(j, 3)), NULL)), NULL), NULL)), NULL), NULL))";
"Type: sourceItem, Id: 137, Value: sourceItem(funcSignature(argDef(int, test_func), NULL), block(listStatement(if(EQUALITY(a, 2), ifStatements(block(listStatement(assigment(b, 5), listStatement(dowhile(block(listStatement(assigment(r, PLUS(5, braces(STAR(6, 4), NULL))), listStatement(dowhile(block(listStatement(while(GREATERTHAN(k, 10), block(listStatement(assigment(a, STAR(b, 2)), listStatement(CALL(test_func4, optionalListExpr(NULL, NULL)), NULL)), NULL)), NULL), NULL), LESSTHAN(i, 2)), NULL)), NULL), GREATERTHAN(j, 3)), NULL)), NULL), NULL)), NULL), NULL))" -> "Type: funcSignature, Id: 81, Value: funcSignature(argDef(int, test_func), NULL)";
"Type: funcSignature, Id: 81, Value: funcSignature(argDef(int, test_func), NULL)" -> "Type: argDef, Id: 80, Value: argDef(int, test_func)";
"Type: argDef, Id: 80, Value: argDef(int, test_func)" -> "Type: TYPEDEF, Id: 78, Value: int";
"Type: argDef, Id: 80, Value: argDef(int, test_func)" -> "Type: IDENTIFIER, Id: 79, Value: test_func";
"Type: sourceItem, Id: 137, Value: sourceItem(funcSignature(argDef(int, test_func), NULL), block(listStatement(if(EQUALITY(a, 2), ifStatements(block(listStatement(assigment(b, 5), listStatement(dowhile(block(listStatement(assigment(r, PLUS(5, braces(STAR(6, 4), NULL))), listStatement(dowhile(block(listStatement(while(GREATERTHAN(k, 10), block(listStatement(assigment(a, STAR(b, 2)), listStatement(CALL(test_func4, optionalListExpr(NULL, NULL)), NULL)), NULL)), NULL), NULL), LESSTHAN(i, 2)), NULL)), NULL), GREATERTHAN(j, 3)), NULL)), NULL), NULL)), NULL), NULL))" -> "Type: block, Id: 136, Value: block(listStatement(if(EQUALITY(a, 2), ifStatements(block(listStatement(assigment(b, 5), listStatement(dowhile(block(listStatement(assigment(r, PLUS(5, braces(STAR(6, 4), NULL))), listStatement(dowhile(block(listStatement(while(GREATERTHAN(k, 10), block(listStatement(assigment(a, STAR(b, 2)), listStatement(CALL(test_func4, optionalListExpr(NULL, NULL)), NULL)), NULL)), NULL), NULL), LESSTHAN(i, 2)), NULL)), NULL), GREATERTHAN(j, 3)), NULL)), NULL), NULL)), NULL), NULL)";
"Type: block, Id: 136, Value: block(listStatement(if(EQUALITY(a, 2), ifStatements(block(listStatement(assigment(b, 5), listStatement(dowhile(block(listStatement(assigment(r, PLUS(5, braces(STAR(6, 4), NULL))), listStatement(dowhile(block(listStatement(while(GREATERTHAN(k, 10), block(listStatement(assigment(a, STAR(b, 2)), listStatement(CALL(test_func4, optionalListExpr(NULL, NULL)), NULL)), NULL)), NULL), NULL), LESSTHAN(i, 2)), NULL)), NULL), GREATERTHAN(j, 3)), NULL)), NULL), NULL)), NULL), NULL)" -> "Type: listStatement, Id: 135, Value: listStatement(if(EQUALITY(a, 2), ifStatements(block(listStatement(assigment(b, 5), listStatement(dowhile(block(listStatement(assigment(r, PLUS(5, braces(STAR(6, 4), NULL))), listStatement(dowhile(block(listStatement(while(GREATERTHAN(k, 10), block(listStatement(assigment(a, STAR(b, 2)), listStatement(CALL(test_func4, optionalListExpr(NULL, NULL)), NULL)), NULL)), NULL), NULL), LESSTHAN(i, 2)), NULL)), NULL), GREATERTHAN(j, 3)), NULL)), NULL), NULL)), NULL)";
"Type: listStatement, Id: 135, Value: listStatement(if(EQUALITY(a, 2), ifStatements(block(listStatement(assigment(b, 5), listStatement(dowhile(block(listStatement(assigment(r, PLUS(5, braces(STAR(6, 4), NULL))), listStatement(dowhile(block(listStatement(while(GREATERTHAN(k, 10), block(listStatement(assigment(a, STAR(b, 2)), listStatement(CALL(test_func4, optionalListExpr(NULL, NULL)), NULL)), NULL)), NULL), NULL), LESSTHAN(i, 2)), NULL)), NULL), GREATERTHAN(j, 3)), NULL)), NULL), NULL)), NULL)" -> "Type: if, Id: 134, Value: if(EQUALITY(a, 2), ifStatements(block(listStatement(assigment(b, 5), listStatement(dowhile(block(listStatement(assigment(r, PLUS(5, braces(STAR(6, 4), NULL))), listStatement(dowhile(block(listStatement(while(GREATERTHAN(k, 10), block(listStatement(assigment(a, STAR(b, 2)), listStatement(CALL(test_func4, optionalListExpr(NULL, NULL)), NULL)), NULL)), NULL), NULL), LESSTHAN(i, 2)), NULL)), NULL), GREATERTHAN(j, 3)), NULL)), NULL), NULL))";
"Type: if, Id: 134, Value: if(EQUALITY(a, 2), ifStatements(block(listStatement(assigment(b, 5), listStatement(dowhile(block(listStatement(assigment(r, PLUS(5, braces(STAR(6, 4), NULL))), listStatement(dowhile(block(listStatement(while(GREATERTHAN(k, 10), block(listStatement(assigment(a, STAR(b, 2)), listStatement(CALL(test_func4, optionalListExpr(NULL, NULL)), NULL)), NULL)), NULL), NULL), LESSTHAN(i, 2)), NULL)), NULL), GREATERTHAN(j, 3)), NULL)), NULL), NULL))" -> "Type: EQUALITY, Id: 85, Value: EQUALITY(a, 2)";
"Type: EQUALITY, Id: 85, Value: EQUALITY(a, 2)" -> "Type: IDENTIFIER, Id: 83, Value: a";
"Type: EQUALITY, Id: 85, Value: EQUALITY(a, 2)" -> "Type: DEC, Id: 84, Value: 2";
"Type: if, Id: 134, Value: if(EQUALITY(a, 2), ifStatements(block(listStatement(assigment(b, 5), listStatement(dowhile(block(listStatement(assigment(r, PLUS(5, braces(STAR(6, 4), NULL))), listStatement(dowhile(block(listStatement(while(GREATERTHAN(k, 10), block(listStatement(assigment(a, STAR(b, 2)), listStatement(CALL(test_func4, optionalListExpr(NULL, NULL)), NULL)), NULL)), NULL), NULL), LESSTHAN(i, 2)), NULL)), NULL), GREATERTHAN(j, 3)), NULL)), NULL), NULL))" -> "Type: ifStatements, Id: 133, Value: ifStatements(block(listStatement(assigment(b, 5), listStatement(dowhile(block(listStatement(assigment(r, PLUS(5, braces(STAR(6, 4), NULL))), listStatement(dowhile(block(listStatement(while(GREATERTHAN(k, 10), block(listStatement(assigment(a, STAR(b, 2)), listStatement(CALL(test_func4, optionalListExpr(NULL, NULL)), NULL)), NULL)), NULL), NULL), LESSTHAN(i, 2)), NULL)), NULL), GREATERTHAN(j, 3)), NULL)), NULL), NULL)";
"Type: ifStatements, Id: 133, Value: ifStatements(block(listStatement(assigment(b, 5), listStatement(dowhile(block(listStatement(assigment(r, PLUS(5, braces(STAR(6, 4), NULL))), listStatement(dowhile(block(listStatement(while(GREATERTHAN(k, 10), block(listStatement(assigment(a, STAR(b, 2)), listStatement(CALL(test_func4, optionalListExpr(NULL, NULL)), NULL)), NULL)), NULL), NULL), LESSTHAN(i, 2)), NULL)), NULL), GREATERTHAN(j, 3)), NULL)), NULL), NULL)" -> "Type: block, Id: 132, Value: block(listStatement(assigment(b, 5), listStatement(dowhile(block(listStatement(assigment(r, PLUS(5, braces(STAR(6, 4), NULL))), listStatement(dowhile(block(listStatement(while(GREATERTHAN(k, 10), block(listStatement(assigment(a, STAR(b, 2)), listStatement(CALL(test_func4, optionalListExpr(NULL, NULL)), NULL)), NULL)), NULL), NULL), LESSTHAN(i, 2)), NULL)), NULL), GREATERTHAN(j, 3)), NULL)), NULL)";
"Type: block, Id: 132, Value: block(listStatement(assigment(b, 5), listStatement(dowhile(block(listStatement(assigment(r, PLUS(5, braces(STAR(6, 4), NULL))), listStatement(dowhile(block(listStatement(while(GREATERTHAN(k, 10), block(listStatement(assigment(a, STAR(b, 2)), listStatement(CALL(test_func4, optionalListExpr(NULL, NULL)), NULL)), NULL)), NULL), NULL), LESSTHAN(i, 2)), NULL)), NULL), GREATERTHAN(j, 3)), NULL)), NULL)" -> "Type: listStatement, Id: 131, Value: listStatement(assigment(b, 5), listStatement(dowhile(block(listStatement(assigment(r, PLUS(5, braces(STAR(6, 4), NULL))), listStatement(dowhile(block(listStatement(while(GREATERTHAN(k, 10), block(listStatement(assigment(a, STAR(b, 2)), listStatement(CALL(test_func4, optionalListExpr(NULL, NULL)), NULL)), NULL)), NULL), NULL), LESSTHAN(i, 2)), NULL)), NULL), GREATERTHAN(j, 3)), NULL))";
"Type: listStatement, Id: 131, Value: listStatement(assigment(b, 5), listStatement(dowhile(block(listStatement(assigment(r, PLUS(5, braces(STAR(6, 4), NULL))), listStatement(dowhile(block(listStatement(while(GREATERTHAN(k, 10), block(listStatement(assigment(a, STAR(b, 2)), listStatement(CALL(test_func4, optionalListExpr(NULL, NULL)), NULL)), NULL)), NULL), NULL), LESSTHAN(i, 2)), NULL)), NULL), GREATERTHAN(j, 3)), NULL))" -> "Type: assigment, Id: 88, Value: assigment(b, 5)";
"Type: assigment, Id: 88, Value: assigment(b, 5)" -> "Type: IDENTIFIER, Id: 86, Value: b";
"Type: assigment, Id: 88, Value: assigment(b, 5)" -> "Type: DEC, Id: 87, Value: 5";
"Type: listStatement, Id: 131, Value: listStatement(assigment(b, 5), listStatement(dowhile(block(listStatement(assigment(r, PLUS(5, braces(STAR(6, 4), NULL))), listStatement(dowhile(block(listStatement(while(GREATERTHAN(k, 10), block(listStatement(assigment(a, STAR(b, 2)), listStatement(CALL(test_func4, optionalListExpr(NULL, NULL)), NULL)), NULL)), NULL), NULL), LESSTHAN(i, 2)), NULL)), NULL), GREATERTHAN(j, 3)), NULL))" -> "Type: listStatement, Id: 130, Value: listStatement(dowhile(block(listStatement(assigment(r, PLUS(5, braces(STAR(6, 4), NULL))), listStatement(dowhile(block(listStatement(while(GREATERTHAN(k, 10), block(listStatement(assigment(a, STAR(b, 2)), listStatement(CALL(test_func4, optionalListExpr(NULL, NULL)), NULL)), NULL)), NULL), NULL), LESSTHAN(i, 2)), NULL)), NULL), GREATERTHAN(j, 3)), NULL)";
"Type: listStatement, Id: 130, Value: listStatement(dowhile(block(listStatement(assigment(r, PLUS(5, braces(STAR(6, 4), NULL))), listStatement(dowhile(block(listStatement(while(GREATERTHAN(k, 10), block(listStatement(assigment(a, STAR(b, 2)), listStatement(CALL(test_func4, optionalListExpr(NULL, NULL)), NULL)), NULL)), NULL), NULL), LESSTHAN(i, 2)), NULL)), NULL), GREATERTHAN(j, 3)), NULL)" -> "Type: dowhile, Id: 129, Value: dowhile(block(listStatement(assigment(r, PLUS(5, braces(STAR(6, 4), NULL))), listStatement(dowhile(block(listStatement(while(GREATERTHAN(k, 10), block(listStatement(assigment(a, STAR(b, 2)), listStatement(CALL(test_func4, optionalListExpr(NULL, NULL)), NULL)), NULL)), NULL), NULL), LESSTHAN(i, 2)), NULL)), NULL), GREATERTHAN(j, 3))";
"Type: dowhile, Id: 129, Value: dowhile(block(listStatement(assigment(r, PLUS(5, braces(STAR(6, 4), NULL))), listStatement(dowhile(block(listStatement(while(GREATERTHAN(k, 10), block(listStatement(assigment(a, STAR(b, 2)), listStatement(CALL(test_func4, optionalListExpr(NULL, NULL)), NULL)), NULL)), NULL), NULL), LESSTHAN(i, 2)), NULL)), NULL), GREATERTHAN(j, 3))" -> "Type: block, Id: 124, Value: block(listStatement(assigment(r, PLUS(5, braces(STAR(6, 4), NULL))), listStatement(dowhile(block(listStatement(while(GREATERTHAN(k, 10), block(listStatement(assigment(a, STAR(b, 2)), listStatement(CALL(test_func4, optionalListExpr(NULL, NULL)), NULL)), NULL)), NULL), NULL), LESSTHAN(i, 2)), NULL)), NULL)";
"Type: block, Id: 124, Value: block(listStatement(assigment(r, PLUS(5, braces(STAR(6, 4), NULL))), listStatement(dowhile(block(listStatement(while(GREATERTHAN(k, 10), block(listStatement(assigment(a, STAR(b, 2)), listStatement(CALL(test_func4, optionalListExpr(NULL, NULL)), NULL)), NULL)), NULL), NULL), LESSTHAN(i, 2)), NULL)), NULL)" -> "Type: listStatement, Id: 123, Value: listStatement(assigment(r, PLUS(5, braces(STAR(6, 4), NULL))), listStatement(dowhile(block(listStatement(while(GREATERTHAN(k, 10), block(listStatement(assigment(a, STAR(b, 2)), listStatement(CALL(test_func4, optionalListExpr(NULL, NULL)), NULL)), NULL)), NULL), NULL), LESSTHAN(i, 2)), NULL))";
"Type: listStatement, Id: 123, Value: listStatement(assigment(r, PLUS(5, braces(STAR(6, 4), NULL))), listStatement(dowhile(block(listStatement(while(GREATERTHAN(k, 10), block(listStatement(assigment(a, STAR(b, 2)), listStatement(CALL(test_func4, optionalListExpr(NULL, NULL)), NULL)), NULL)), NULL), NULL), LESSTHAN(i, 2)), NULL))" -> "Type: assigment, Id: 97, Value: assigment(r, PLUS(5, braces(STAR(6, 4), NULL)))";
"Type: assigment, Id: 97, Value: assigment(r, PLUS(5, braces(STAR(6, 4), NULL)))" -> "Type: IDENTIFIER, Id: 90, Value: r";
"Type: assigment, Id: 97, Value: assigment(r, PLUS(5, braces(STAR(6, 4), NULL)))" -> "Type: PLUS, Id: 96, Value: PLUS(5, braces(STAR(6, 4), NULL))";
"Type: PLUS, Id: 96, Value: PLUS(5, braces(STAR(6, 4), NULL))" -> "Type: DEC, Id: 91, Value: 5";
"Type: PLUS, Id: 96, Value: PLUS(5, braces(STAR(6, 4), NULL))" -> "Type: braces, Id: 95, Value: braces(STAR(6, 4), NULL)";
"Type: braces, Id: 95, Value: braces(STAR(6, 4), NULL)" -> "Type: STAR, Id: 94, Value: STAR(6, 4)";
"Type: STAR, Id: 94, Value: STAR(6, 4)" -> "Type: DEC, Id: 92, Value: 6";
"Type: STAR, Id: 94, Value: STAR(6, 4)" -> "Type: DEC, Id: 93, Value: 4";
"Type: listStatement, Id: 123, Value: listStatement(assigment(r, PLUS(5, braces(STAR(6, 4), NULL))), listStatement(dowhile(block(listStatement(while(GREATERTHAN(k, 10), block(listStatement(assigment(a, STAR(b, 2)), listStatement(CALL(test_func4, optionalListExpr(NULL, NULL)), NULL)), NULL)), NULL), NULL), LESSTHAN(i, 2)), NULL))" -> "Type: listStatement, Id: 122, Value: listStatement(dowhile(block(listStatement(while(GREATERTHAN(k, 10), block(listStatement(assigment(a, STAR(b, 2)), listStatement(CALL(test_func4, optionalListExpr(NULL, NULL)), NULL)), NULL)), NULL), NULL), LESSTHAN(i, 2)), NULL)";
"Type: listStatement, Id: 122, Value: listStatement(dowhile(block(listStatement(while(GREATERTHAN(k, 10), block(listStatement(assigment(a, STAR(b, 2)), listStatement(CALL(test_func4, optionalListExpr(NULL, NULL)), NULL)), NULL)), NULL), NULL), LESSTHAN(i, 2)), NULL)" -> "Type: dowhile, Id: 121, Value: dowhile(block(listStatement(while(GREATERTHAN(k, 10), block(listStatement(assigment(a, STAR(b, 2)), listStatement(CALL(test_func4, optionalListExpr(NULL, NULL)), NULL)), NULL)), NULL), NULL), LESSTHAN(i, 2))";
"Type: dowhile, Id: 121, Value: dowhile(block(listStatement(while(GREATERTHAN(k, 10), block(listStatement(assigment(a, STAR(b, 2)), listStatement(CALL(test_func4, optionalListExpr(NULL, NULL)), NULL)), NULL)), NULL), NULL), LESSTHAN(i, 2))" -> "Type: block, Id: 116, Value: block(listStatement(while(GREATERTHAN(k, 10), block(listStatement(assigment(a, STAR(b, 2)), listStatement(CALL(test_func4, optionalListExpr(NULL, NULL)), NULL)), NULL)), NULL), NULL)";
"Type: block, Id: 116, Value: block(listStatement(while(GREATERTHAN(k, 10), block(listStatement(assigment(a, STAR(b, 2)), listStatement(CALL(test_func4, optionalListExpr(NULL, NULL)), NULL)), NULL)), NULL), NULL)" -> "Type: listStatement, Id: 115, Value: listStatement(while(GREATERTHAN(k, 10), block(listStatement(assigment(a, STAR(b, 2)), listStatement(CALL(test_func4, optionalListExpr(NULL, NULL)), NULL)), NULL)), NULL)";
"Type: listStatement, Id: 115, Value: listStatement(while(GREATERTHAN(k, 10), block(listStatement(assigment(a, STAR(b, 2)), listStatement(CALL(test_func4, optionalListExpr(NULL, NULL)), NULL)), NULL)), NULL)" -> "Type: while, Id: 114, Value: while(GREATERTHAN(k, 10), block(listStatement(assigment(a, STAR(b, 2)), listStatement(CALL(test_func4, optionalListExpr(NULL, NULL)), NULL)), NULL))";
"Type: while, Id: 114, Value: while(GREATERTHAN(k, 10), block(listStatement(assigment(a, STAR(b, 2)), listStatement(CALL(test_func4, optionalListExpr(NULL, NULL)), NULL)), NULL))" -> "Type: GREATERTHAN, Id: 102, Value: GREATERTHAN(k, 10)";
"Type: GREATERTHAN, Id: 102, Value: GREATERTHAN(k, 10)" -> "Type: IDENTIFIER, Id: 100, Value: k";
"Type: GREATERTHAN, Id: 102, Value: GREATERTHAN(k, 10)" -> "Type: DEC, Id: 101, Value: 10";
"Type: while, Id: 114, Value: while(GREATERTHAN(k, 10), block(listStatement(assigment(a, STAR(b, 2)), listStatement(CALL(test_func4, optionalListExpr(NULL, NULL)), NULL)), NULL))" -> "Type: block, Id: 113, Value: block(listStatement(assigment(a, STAR(b, 2)), listStatement(CALL(test_func4, optionalListExpr(NULL, NULL)), NULL)), NULL)";
"Type: block, Id: 113, Value: block(listStatement(assigment(a, STAR(b, 2)), listStatement(CALL(test_func4, optionalListExpr(NULL, NULL)), NULL)), NULL)" -> "Type: listStatement, Id: 112, Value: listStatement(assigment(a, STAR(b, 2)), listStatement(CALL(test_func4, optionalListExpr(NULL, NULL)), NULL))";
"Type: listStatement, Id: 112, Value: listStatement(assigment(a, STAR(b, 2)), listStatement(CALL(test_func4, optionalListExpr(NULL, NULL)), NULL))" -> "Type: assigment, Id: 107, Value: assigment(a, STAR(b, 2))";
"Type: assigment, Id: 107, Value: assigment(a, STAR(b, 2))" -> "Type: IDENTIFIER, Id: 103, Value: a";
"Type: assigment, Id: 107, Value: assigment(a, STAR(b, 2))" -> "Type: STAR, Id: 106, Value: STAR(b, 2)";
"Type: STAR, Id: 106, Value: STAR(b, 2)" -> "Type: IDENTIFIER, Id: 104, Value: b";
"Type: STAR, Id: 106, Value: STAR(b, 2)" -> "Type: DEC, Id: 105, Value: 2";
"Type: listStatement, Id: 112, Value: listStatement(assigment(a, STAR(b, 2)), listStatement(CALL(test_func4, optionalListExpr(NULL, NULL)), NULL))" -> "Type: listStatement, Id: 111, Value: listStatement(CALL(test_func4, optionalListExpr(NULL, NULL)), NULL)";
"Type: listStatement, Id: 111, Value: listStatement(CALL(test_func4, optionalListExpr(NULL, NULL)), NULL)" -> "Type: CALL, Id: 110, Value: CALL(test_func4, optionalListExpr(NULL, NULL))";
"Type: CALL, Id: 110, Value: CALL(test_func4, optionalListExpr(NULL, NULL))" -> "Type: IDENTIFIER, Id: 108, Value: test_func4";
"Type: CALL, Id: 110, Value: CALL(test_func4, optionalListExpr(NULL, NULL))" -> "Type: optionalListExpr, Id: 109, Value: optionalListExpr(NULL, NULL)";
"Type: dowhile, Id: 121, Value: dowhile(block(listStatement(while(GREATERTHAN(k, 10), block(listStatement(assigment(a, STAR(b, 2)), listStatement(CALL(test_func4, optionalListExpr(NULL, NULL)), NULL)), NULL)), NULL), NULL), LESSTHAN(i, 2))" -> "Type: LESSTHAN, Id: 120, Value: LESSTHAN(i, 2)";
"Type: LESSTHAN, Id: 120, Value: LESSTHAN(i, 2)" -> "Type: IDENTIFIER, Id: 118, Value: i";
"Type: LESSTHAN, Id: 120, Value: LESSTHAN(i, 2)" -> "Type: DEC, Id: 119, Value: 2";
"Type: dowhile, Id: 129, Value: dowhile(block(listStatement(assigment(r, PLUS(5, braces(STAR(6, 4), NULL))), listStatement(dowhile(block(listStatement(while(GREATERTHAN(k, 10), block(listStatement(assigment(a, STAR(b, 2)), listStatement(CALL(test_func4, optionalListExpr(NULL, NULL)), NULL)), NULL)), NULL), NULL), LESSTHAN(i, 2)), NULL)), NULL), GREATERTHAN(j, 3))" -> "Type: GREATERTHAN, Id: 128, Value: GREATERTHAN(j, 3)";
"Type: GREATERTHAN, Id: 128, Value: GREATERTHAN(j, 3)" -> "Type: IDENTIFIER, Id: 126, Value: j";
"Type: GREATERTHAN, Id: 128, Value: GREATERTHAN(j, 3)" -> "Type: DEC, Id: 127, Value: 3";
"ROOT" -> "Type: source, Id: 195, Value: source(NULL, sourceItem(funcSignature(argDef(int, test_func1), NULL), block(listStatement(assigment(b, PLUS(a, c)), listStatement(assigment(d, PLUS(10, MINUS(12, 13))), listStatement(if(LESSTHAN(i, 10), ifStatements(block(listStatement(assigment(a, 1), listStatement(if(LESSTHAN(m, 1), ifStatements(block(listStatement(assigment(m, 2), NULL), NULL), NULL)), NULL)), NULL), NULL)), listStatement(if(LESSTHAN(k, 5), ifStatements(block(listStatement(assigment(a, 2), NULL), NULL), NULL)), NULL)))), NULL)))""Type: source, Id: 195, Value: source(NULL, sourceItem(funcSignature(argDef(int, test_func1), NULL), block(listStatement(assigment(b, PLUS(a, c)), listStatement(assigment(d, PLUS(10, MINUS(12, 13))), listStatement(if(LESSTHAN(i, 10), ifStatements(block(listStatement(assigment(a, 1), listStatement(if(LESSTHAN(m, 1), ifStatements(block(listStatement(assigment(m, 2), NULL), NULL), NULL)), NULL)), NULL), NULL)), listStatement(if(LESSTHAN(k, 5), ifStatements(block(listStatement(assigment(a, 2), NULL), NULL), NULL)), NULL)))), NULL)))" -> "Type: sourceItem, Id: 194, Value: sourceItem(funcSignature(argDef(int, test_func1), NULL), block(listStatement(assigment(b, PLUS(a, c)), listStatement(assigment(d, PLUS(10, MINUS(12, 13))), listStatement(if(LESSTHAN(i, 10), ifStatements(block(listStatement(assigment(a, 1), listStatement(if(LESSTHAN(m, 1), ifStatements(block(listStatement(assigment(m, 2), NULL), NULL), NULL)), NULL)), NULL), NULL)), listStatement(if(LESSTHAN(k, 5), ifStatements(block(listStatement(assigment(a, 2), NULL), NULL), NULL)), NULL)))), NULL))";
"Type: sourceItem, Id: 194, Value: sourceItem(funcSignature(argDef(int, test_func1), NULL), block(listStatement(assigment(b, PLUS(a, c)), listStatement(assigment(d, PLUS(10, MINUS(12, 13))), listStatement(if(LESSTHAN(i, 10), ifStatements(block(listStatement(assigment(a, 1), listStatement(if(LESSTHAN(m, 1), ifStatements(block(listStatement(assigment(m, 2), NULL), NULL), NULL)), NULL)), NULL), NULL)), listStatement(if(LESSTHAN(k, 5), ifStatements(block(listStatement(assigment(a, 2), NULL), NULL), NULL)), NULL)))), NULL))" -> "Type: funcSignature, Id: 142, Value: funcSignature(argDef(int, test_func1), NULL)";
"Type: funcSignature, Id: 142, Value: funcSignature(argDef(int, test_func1), NULL)" -> "Type: argDef, Id: 141, Value: argDef(int, test_func1)";
"Type: argDef, Id: 141, Value: argDef(int, test_func1)" -> "Type: TYPEDEF, Id: 139, Value: int";
"Type: argDef, Id: 141, Value: argDef(int, test_func1)" -> "Type: IDENTIFIER, Id: 140, Value: test_func1";
"Type: sourceItem, Id: 194, Value: sourceItem(funcSignature(argDef(int, test_func1), NULL), block(listStatement(assigment(b, PLUS(a, c)), listStatement(assigment(d, PLUS(10, MINUS(12, 13))), listStatement(if(LESSTHAN(i, 10), ifStatements(block(listStatement(assigment(a, 1), listStatement(if(LESSTHAN(m, 1), ifStatements(block(listStatement(assigment(m, 2), NULL), NULL), NULL)), NULL)), NULL), NULL)), listStatement(if(LESSTHAN(k, 5), ifStatements(block(listStatement(assigment(a, 2), NULL), NULL), NULL)), NULL)))), NULL))" -> "Type: block, Id: 193, Value: block(listStatement(assigment(b, PLUS(a, c)), listStatement(assigment(d, PLUS(10, MINUS(12, 13))), listStatement(if(LESSTHAN(i, 10), ifStatements(block(listStatement(assigment(a, 1), listStatement(if(LESSTHAN(m, 1), ifStatements(block(listStatement(assigment(m, 2), NULL), NULL), NULL)), NULL)), NULL), NULL)), listStatement(if(LESSTHAN(k, 5), ifStatements(block(listStatement(assigment(a, 2), NULL), NULL), NULL)), NULL)))), NULL)";
"Type: block, Id: 193, Value: block(listStatement(assigment(b, PLUS(a, c)), listStatement(assigment(d, PLUS(10, MINUS(12, 13))), listStatement(if(LESSTHAN(i, 10), ifStatements(block(listStatement(assigment(a, 1), listStatement(if(LESSTHAN(m, 1), ifStatements(block(listStatement(assigment(m, 2), NULL), NULL), NULL)), NULL)), NULL), NULL)), listStatement(if(LESSTHAN(k, 5), ifStatements(block(listStatement(assigment(a, 2), NULL), NULL), NULL)), NULL)))), NULL)" -> "Type: listStatement, Id: 192, Value: listStatement(assigment(b, PLUS(a, c)), listStatement(assigment(d, PLUS(10, MINUS(12, 13))), listStatement(if(LESSTHAN(i, 10), ifStatements(block(listStatement(assigment(a, 1), listStatement(if(LESSTHAN(m, 1), ifStatements(block(listStatement(assigment(m, 2), NULL), NULL), NULL)), NULL)), NULL), NULL)), listStatement(if(LESSTHAN(k, 5), ifStatements(block(listStatement(assigment(a, 2), NULL), NULL), NULL)), NULL))))";
"Type: listStatement, Id: 192, Value: listStatement(assigment(b, PLUS(a, c)), listStatement(assigment(d, PLUS(10, MINUS(12, 13))), listStatement(if(LESSTHAN(i, 10), ifStatements(block(listStatement(assigment(a, 1), listStatement(if(LESSTHAN(m, 1), ifStatements(block(listStatement(assigment(m, 2), NULL), NULL), NULL)), NULL)), NULL), NULL)), listStatement(if(LESSTHAN(k, 5), ifStatements(block(listStatement(assigment(a, 2), NULL), NULL), NULL)), NULL))))" -> "Type: assigment, Id: 147, Value: assigment(b, PLUS(a, c))";
"Type: assigment, Id: 147, Value: assigment(b, PLUS(a, c))" -> "Type: IDENTIFIER, Id: 143, Value: b";
"Type: assigment, Id: 147, Value: assigment(b, PLUS(a, c))" -> "Type: PLUS, Id: 146, Value: PLUS(a, c)";
"Type: PLUS, Id: 146, Value: PLUS(a, c)" -> "Type: IDENTIFIER, Id: 144, Value: a";
"Type: PLUS, Id: 146, Value: PLUS(a, c)" -> "Type: IDENTIFIER, Id: 145, Value: c";
"Type: listStatement, Id: 192, Value: listStatement(assigment(b, PLUS(a, c)), listStatement(assigment(d, PLUS(10, MINUS(12, 13))), listStatement(if(LESSTHAN(i, 10), ifStatements(block(listStatement(assigment(a, 1), listStatement(if(LESSTHAN(m, 1), ifStatements(block(listStatement(assigment(m, 2), NULL), NULL), NULL)), NULL)), NULL), NULL)), listStatement(if(LESSTHAN(k, 5), ifStatements(block(listStatement(assigment(a, 2), NULL), NULL), NULL)), NULL))))" -> "Type: listStatement, Id: 191, Value: listStatement(assigment(d, PLUS(10, MINUS(12, 13))), listStatement(if(LESSTHAN(i, 10), ifStatements(block(listStatement(assigment(a, 1), listStatement(if(LESSTHAN(m, 1), ifStatements(block(listStatement(assigment(m, 2), NULL), NULL), NULL)), NULL)), NULL), NULL)), listStatement(if(LESSTHAN(k, 5), ifStatements(block(listStatement(assigment(a, 2), NULL), NULL), NULL)), NULL)))";
"Type: listStatement, Id: 191, Value: listStatement(assigment(d, PLUS(10, MINUS(12, 13))), listStatement(if(LESSTHAN(i, 10), ifStatements(block(listStatement(assigment(a, 1), listStatement(if(LESSTHAN(m, 1), ifStatements(block(listStatement(assigment(m, 2), NULL), NULL), NULL)), NULL)), NULL), NULL)), listStatement(if(LESSTHAN(k, 5), ifStatements(block(listStatement(assigment(a, 2), NULL), NULL), NULL)), NULL)))" -> "Type: assigment, Id: 154, Value: assigment(d, PLUS(10, MINUS(12, 13)))";
"Type: assigment, Id: 154, Value: assigment(d, PLUS(10, MINUS(12, 13)))" -> "Type: IDENTIFIER, Id: 148, Value: d";
"Type: assigment, Id: 154, Value: assigment(d, PLUS(10, MINUS(12, 13)))" -> "Type: PLUS, Id: 153, Value: PLUS(10, MINUS(12, 13))";
"Type: PLUS, Id: 153, Value: PLUS(10, MINUS(12, 13))" -> "Type: DEC, Id: 149, Value: 10";
"Type: PLUS, Id: 153, Value: PLUS(10, MINUS(12, 13))" -> "Type: MINUS, Id: 152, Value: MINUS(12, 13)";
"Type: MINUS, Id: 152, Value: MINUS(12, 13)" -> "Type: DEC, Id: 150, Value: 12";
"Type: MINUS, Id: 152, Value: MINUS(12, 13)" -> "Type: DEC, Id: 151, Value: 13";
"Type: listStatement, Id: 191, Value: listStatement(assigment(d, PLUS(10, MINUS(12, 13))), listStatement(if(LESSTHAN(i, 10), ifStatements(block(listStatement(assigment(a, 1), listStatement(if(LESSTHAN(m, 1), ifStatements(block(listStatement(assigment(m, 2), NULL), NULL), NULL)), NULL)), NULL), NULL)), listStatement(if(LESSTHAN(k, 5), ifStatements(block(listStatement(assigment(a, 2), NULL), NULL), NULL)), NULL)))" -> "Type: listStatement, Id: 190, Value: listStatement(if(LESSTHAN(i, 10), ifStatements(block(listStatement(assigment(a, 1), listStatement(if(LESSTHAN(m, 1), ifStatements(block(listStatement(assigment(m, 2), NULL), NULL), NULL)), NULL)), NULL), NULL)), listStatement(if(LESSTHAN(k, 5), ifStatements(block(listStatement(assigment(a, 2), NULL), NULL), NULL)), NULL))";
"Type: listStatement, Id: 190, Value: listStatement(if(LESSTHAN(i, 10), ifStatements(block(listStatement(assigment(a, 1), listStatement(if(LESSTHAN(m, 1), ifStatements(block(listStatement(assigment(m, 2), NULL), NULL), NULL)), NULL)), NULL), NULL)), listStatement(if(LESSTHAN(k, 5), ifStatements(block(listStatement(assigment(a, 2), NULL), NULL), NULL)), NULL))" -> "Type: if, Id: 178, Value: if(LESSTHAN(i, 10), ifStatements(block(listStatement(assigment(a, 1), listStatement(if(LESSTHAN(m, 1), ifStatements(block(listStatement(assigment(m, 2), NULL), NULL), NULL)), NULL)), NULL), NULL))";
"Type: if, Id: 178, Value: if(LESSTHAN(i, 10), ifStatements(block(listStatement(assigment(a, 1), listStatement(if(LESSTHAN(m, 1), ifStatements(block(listStatement(assigment(m, 2), NULL), NULL), NULL)), NULL)), NULL), NULL))" -> "Type: LESSTHAN, Id: 158, Value: LESSTHAN(i, 10)";
"Type: LESSTHAN, Id: 158, Value: LESSTHAN(i, 10)" -> "Type: IDENTIFIER, Id: 156, Value: i";
"Type: LESSTHAN, Id: 158, Value: LESSTHAN(i, 10)" -> "Type: DEC, Id: 157, Value: 10";
"Type: if, Id: 178, Value: if(LESSTHAN(i, 10), ifStatements(block(listStatement(assigment(a, 1), listStatement(if(LESSTHAN(m, 1), ifStatements(block(listStatement(assigment(m, 2), NULL), NULL), NULL)), NULL)), NULL), NULL))" -> "Type: ifStatements, Id: 177, Value: ifStatements(block(listStatement(assigment(a, 1), listStatement(if(LESSTHAN(m, 1), ifStatements(block(listStatement(assigment(m, 2), NULL), NULL), NULL)), NULL)), NULL), NULL)";
"Type: ifStatements, Id: 177, Value: ifStatements(block(listStatement(assigment(a, 1), listStatement(if(LESSTHAN(m, 1), ifStatements(block(listStatement(assigment(m, 2), NULL), NULL), NULL)), NULL)), NULL), NULL)" -> "Type: block, Id: 175, Value: block(listStatement(assigment(a, 1), listStatement(if(LESSTHAN(m, 1), ifStatements(block(listStatement(assigment(m, 2), NULL), NULL), NULL)), NULL)), NULL)";
"Type: block, Id: 175, Value: block(listStatement(assigment(a, 1), listStatement(if(LESSTHAN(m, 1), ifStatements(block(listStatement(assigment(m, 2), NULL), NULL), NULL)), NULL)), NULL)" -> "Type: listStatement, Id: 174, Value: listStatement(assigment(a, 1), listStatement(if(LESSTHAN(m, 1), ifStatements(block(listStatement(assigment(m, 2), NULL), NULL), NULL)), NULL))";
"Type: listStatement, Id: 174, Value: listStatement(assigment(a, 1), listStatement(if(LESSTHAN(m, 1), ifStatements(block(listStatement(assigment(m, 2), NULL), NULL), NULL)), NULL))" -> "Type: assigment, Id: 161, Value: assigment(a, 1)";
"Type: assigment, Id: 161, Value: assigment(a, 1)" -> "Type: IDENTIFIER, Id: 159, Value: a";
"Type: assigment, Id: 161, Value: assigment(a, 1)" -> "Type: DEC, Id: 160, Value: 1";
"Type: listStatement, Id: 174, Value: listStatement(assigment(a, 1), listStatement(if(LESSTHAN(m, 1), ifStatements(block(listStatement(assigment(m, 2), NULL), NULL), NULL)), NULL))" -> "Type: listStatement, Id: 173, Value: listStatement(if(LESSTHAN(m, 1), ifStatements(block(listStatement(assigment(m, 2), NULL), NULL), NULL)), NULL)";
"Type: listStatement, Id: 173, Value: listStatement(if(LESSTHAN(m, 1), ifStatements(block(listStatement(assigment(m, 2), NULL), NULL), NULL)), NULL)" -> "Type: if, Id: 172, Value: if(LESSTHAN(m, 1), ifStatements(block(listStatement(assigment(m, 2), NULL), NULL), NULL))";
"Type: if, Id: 172, Value: if(LESSTHAN(m, 1), ifStatements(block(listStatement(assigment(m, 2), NULL), NULL), NULL))" -> "Type: LESSTHAN, Id: 165, Value: LESSTHAN(m, 1)";
"Type: LESSTHAN, Id: 165, Value: LESSTHAN(m, 1)" -> "Type: IDENTIFIER, Id: 163, Value: m";
"Type: LESSTHAN, Id: 165, Value: LESSTHAN(m, 1)" -> "Type: DEC, Id: 164, Value: 1";
"Type: if, Id: 172, Value: if(LESSTHAN(m, 1), ifStatements(block(listStatement(assigment(m, 2), NULL), NULL), NULL))" -> "Type: ifStatements, Id: 171, Value: ifStatements(block(listStatement(assigment(m, 2), NULL), NULL), NULL)";
"Type: ifStatements, Id: 171, Value: ifStatements(block(listStatement(assigment(m, 2), NULL), NULL), NULL)" -> "Type: block, Id: 170, Value: block(listStatement(assigment(m, 2), NULL), NULL)";
"Type: block, Id: 170, Value: block(listStatement(assigment(m, 2), NULL), NULL)" -> "Type: listStatement, Id: 169, Value: listStatement(assigment(m, 2), NULL)";
"Type: listStatement, Id: 169, Value: listStatement(assigment(m, 2), NULL)" -> "Type: assigment, Id: 168, Value: assigment(m, 2)";
"Type: assigment, Id: 168, Value: assigment(m, 2)" -> "Type: IDENTIFIER, Id: 166, Value: m";
"Type: assigment, Id: 168, Value: assigment(m, 2)" -> "Type: DEC, Id: 167, Value: 2";
"Type: listStatement, Id: 190, Value: listStatement(if(LESSTHAN(i, 10), ifStatements(block(listStatement(assigment(a, 1), listStatement(if(LESSTHAN(m, 1), ifStatements(block(listStatement(assigment(m, 2), NULL), NULL), NULL)), NULL)), NULL), NULL)), listStatement(if(LESSTHAN(k, 5), ifStatements(block(listStatement(assigment(a, 2), NULL), NULL), NULL)), NULL))" -> "Type: listStatement, Id: 189, Value: listStatement(if(LESSTHAN(k, 5), ifStatements(block(listStatement(assigment(a, 2), NULL), NULL), NULL)), NULL)";
"Type: listStatement, Id: 189, Value: listStatement(if(LESSTHAN(k, 5), ifStatements(block(listStatement(assigment(a, 2), NULL), NULL), NULL)), NULL)" -> "Type: if, Id: 188, Value: if(LESSTHAN(k, 5), ifStatements(block(listStatement(assigment(a, 2), NULL), NULL), NULL))";
"Type: if, Id: 188, Value: if(LESSTHAN(k, 5), ifStatements(block(listStatement(assigment(a, 2), NULL), NULL), NULL))" -> "Type: LESSTHAN, Id: 181, Value: LESSTHAN(k, 5)";
"Type: LESSTHAN, Id: 181, Value: LESSTHAN(k, 5)" -> "Type: IDENTIFIER, Id: 179, Value: k";
"Type: LESSTHAN, Id: 181, Value: LESSTHAN(k, 5)" -> "Type: DEC, Id: 180, Value: 5";
"Type: if, Id: 188, Value: if(LESSTHAN(k, 5), ifStatements(block(listStatement(assigment(a, 2), NULL), NULL), NULL))" -> "Type: ifStatements, Id: 187, Value: ifStatements(block(listStatement(assigment(a, 2), NULL), NULL), NULL)";
"Type: ifStatements, Id: 187, Value: ifStatements(block(listStatement(assigment(a, 2), NULL), NULL), NULL)" -> "Type: block, Id: 186, Value: block(listStatement(assigment(a, 2), NULL), NULL)";
"Type: block, Id: 186, Value: block(listStatement(assigment(a, 2), NULL), NULL)" -> "Type: listStatement, Id: 185, Value: listStatement(assigment(a, 2), NULL)";
"Type: listStatement, Id: 185, Value: listStatement(assigment(a, 2), NULL)" -> "Type: assigment, Id: 184, Value: assigment(a, 2)";
"Type: assigment, Id: 184, Value: assigment(a, 2)" -> "Type: IDENTIFIER, Id: 182, Value: a";
"Type: assigment, Id: 184, Value: assigment(a, 2)" -> "Type: DEC, Id: 183, Value: 2";

}
